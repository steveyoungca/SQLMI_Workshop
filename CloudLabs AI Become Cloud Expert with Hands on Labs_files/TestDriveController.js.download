(function () {
    'use strict';
    angular
        .module('cloudsandbox.studentportal')
        .controller('TestDriveController', TestDriveController);

    TestDriveController.$inject = ['$scope', '$rootScope', '$state', '$stateParams', '$window', '$location', '$sce', '$interval', '$timeout', 'notifier', 'DataService', '$http', 'appConstant', 'serviceEndpoint', 'adalAuthenticationService', 'ModalService', 'ngTableParams', '$filter', '$cookies'];

    /// <summary>
    /// Controller for event detail and registration page.
    /// </summary>
    function TestDriveController($scope, $rootScope, $state, $stateParams, $window, $location, $sce, $interval, $timeout, notifier, DataService, $http, appConstant, serviceEndpoint, adalService, ModalService, ngTableParams, $filter, $cookies) {

        var vm = this;
        $window.scrollTo(0, 0);
        $scope.TestDriveMode = 'None';
        $scope.registered = false;
        var workshop, testdrive;
        $scope.isTestDriveRedo = false;
        $scope.SelectedTestDriveUniqueName = $stateParams.testdriveId;
        $scope.userInviteLink = null;
        var isDeploying = false;
        var isPolling = false;
        var polling;
        $scope.validOfficeEmail = true;
        $scope.CurrentAzurePassSubscription = { Id: null }
        var invalidEmails = ["gmail", "yahoo", "hotmail", "live", "outlook", "msn"];
        $scope.validFirstName = true;
        $scope.validLastName = true;
        $scope.validOrganization = true;
        $scope.expandModule = false;
        $scope.register = { 'ODL': false, 'Video': false };
        $scope.showMode = 'Lab';
        $scope.labDetailsShowMode = 'EnvironmentDetails';
        $scope.CurrentUser = {};
        $scope.AttendeeLeaderboard = {};
        $scope.Leaderboard = {};
        $scope.hideVideo = false;
        $scope.isExpired = false;
        $scope.ResponseReceived = false;
        $scope.manualStep = false;
        $scope.EmptyQuiz = false;
        $scope.resources = [];
        $scope.CurrentStepIdCollection = [];
        $scope.BackupInProgress = false;
        $scope.RestoreInProgress = false;
        $scope.showLaunchLab = false;
        $scope.tabOptions = ['Overview', 'Lab'];
        $scope.selectedModule = 0;
        $scope.voucherCode = $stateParams.userInviteLink;
        $rootScope.showSurvey = false;
        $scope.style = false;
        var toSend = {};
        var obj = {}, temp = [], i;
        if (localStorage.getItem("selectedTestDrive"))
            localStorage.removeItem("selectedTestDrive");
       
        /// <summary>
        /// If cold get request, return to main
        /// </summary>
        if ($scope.SelectedTestDriveUniqueName === undefined)
            $state.go('main.home');

        /// $state.current.name = main.testdrive / main.testdriveuser
        //console.log(adalService.userInfo);
        if ($state.current.name === 'main.testdrive') {
            $scope.inviteOnly = false;
            $scope.TestDriveMode = 'Information';
            getTestDriveData();
        }
        else if ($state.current.name === 'main.testdriveuser') {
            //get invite link and user details, init deplo
            $scope.userInviteLink = $stateParams.userInviteLink;
            $scope.TestDriveMode = 'Lab';
            getTestDriveData();
        }
        else if ($state.current.name === 'main.leaderboard') {
            getTestDriveData();
            getLeaderboard();
        }

        $scope.getpolldata = function () {
            $http.get(appConstant.apiRoot + serviceEndpoint.poll + '?uid=' + $scope.CurrentTestDrive.SurveyGuid)
                .then(function (response) {
                    toSend['PollId'] = response.data.Id;
                    $scope.pollData = response;
                    $scope.questionModel = response.data.Questions;
                });

        };
        $scope.saveContinuousResponse = function (questionId, answerId) {
            //if ($scope.attendeLabDetails.Questions.Type == "rating") {
            $http.post(appConstant.apiRoot + serviceEndpoint.response + '/SaveQuestionresponse?pollid=' + $scope.pollData.data.Id + '&questionId=' + questionId + '&voucherCode=' + $scope.voucherCode + '&answer=' + answerId).then(function (response) {

            })

            //    } else {

            //        alert("only for rating questions");

            //    }


        }

        $scope.submitSurveyResponse = function () {

                temp = [];
                var temp2, flag = 0;

                //NOTE: split checkbox answers
                for (var key in obj) {
                    $scope.questionModel.filter(function (question) {
                        if (question.Type === 'checkbox' && question.Id == key) {
                            temp2 = [];
                            temp2 = obj[key].split(',');
                            for (i = 0; i < temp2.length; i++) {
                                temp.push({ 'QuestionId': key, 'Answer': temp2[i], 'QuestionType': 'checkbox' });
                                flag = 1;
                            }
                        }
                    });
                    if (flag === 0) {
                        temp.push({ 'QuestionId': key, 'Answer': obj[key] });
                    }
                    else {
                        flag = 0;
                    }
                }

                //NOTE: Check whether any question was left unanswered. If unanaswered, include that question with no answer part.
                for (i = 0; i < $scope.questionModel.length; i++) {
                    if (!obj.hasOwnProperty($scope.questionModel[i].Id)) {
                        temp.push({ 'QuestionId': $scope.questionModel[i].Id, 'Answer': "" });
                    }
                }
                toSend['Responses'] = temp;
                $http.post(appConstant.apiRoot + serviceEndpoint.response + '/UpdatePollResponse?pollid=' + $scope.pollData.data.Id + '&voucherCode=' + $scope.voucherCode, toSend).then(function (response) {
                    ModalService.showModal({
                        templateUrl: '../app/views/shared/successModal.html',
                        controller: "ModalController",
                        inputs: {
                            title: "Success",
                            description: "Thank you for taking the survey!",
                            failureButtonText: "",
                            successButtonText: "OK"
                        }
                    }).then(function (modal) {
                        modal.element.modal();
                        modal.close.then(function (result) {
                            //$window.location.reload();
                            $scope.changeTabOption('Lab');
                        })
                    });
                })
                    .catch(function () {
                        ModalService.showModal({
                            templateUrl: '../app/views/shared/successModal.html',
                            controller: "ModalController",
                            inputs: {
                                title: "Failed",
                                description: "We ran into some unexpected trouble. Please try again later.",
                                failureButtonText: "Cancel",
                                successButtonText: "OK"
                            }
                        }).then(function (modal) {
                            modal.element.modal();
                            modal.close.then(function (result) {
                                if (result === "Yes")
                                   $state.go("main.home");
                            })
                        });
                    });
        }

        $scope.selectedVal = function (qID, value) {
            temp = [];
            if (qID) {

                // Continuous Saving of response (Rating Question)
                $scope.questionModel.filter(function (question) {
                    if (question.Type === 'rating' && question.Id == qID) {
                        $scope.saveContinuousResponse(qID, value);
                    }
                });
                $scope.questionModel.filter(function (question) {
                    if (question.Type === 'text' && question.Id == qID) {
                        $scope.saveContinuousResponse(qID, value);
                    }
                });

                //TODO: Optimise for when question is of type checkbox
                //NOTE: Store checkbox answers as one comma separated string 
                $scope.questionModel.filter(function (question) {
                    if (question.Type === 'radio' && question.Id == qID) {
                        $scope.saveContinuousResponse(qID, value);
                    }
                });

                $scope.questionModel.filter(function (question) {

                    if (question.Type === 'checkbox' && question.Id == qID) {
                        temp = value.filter(function (val) {
                            return val.selected;
                        });
                    }
                });
                if (temp.length > 0) {
                    value = [];
                    for (i = 0; i < temp.length; i++) {
                        value.push(temp[i].Id);
                    }
                    value = value.join(',');
                }
                temp = [];
                obj[qID] = value;
            }
        }

        $scope.grabAzurePass = function () {
            $http.get(appConstant.apiRoot + serviceEndpoint.attendeeTestDrive + '/CheckLabActivationClosed?internalId=' + encodeURIComponent($scope.CurrentTestDrive.InternalId) + '&voucherCode=' + $scope.userInviteLink)
                .then(function (response) {
                    if (response.data) {
                        $scope.modeOfOperation = 'ActivationClosed';
                    }
                    else {
                        grabAzurePassForUser();
                    }
                });
        };

        $scope.startTestDrive = function () {
            var localTime = moment(localTime).format('YYYY-MM-DD');
            var stillUtc = moment($scope.CurrentTestDrive.ExpiryDate);
            var expiryDateToLocal = moment(stillUtc).format('YYYY-MM-DD');

            //Checking if the ODL is expired
            if (localTime <= expiryDateToLocal) {
                $scope.isExpired = false;
                $scope.TestDriveState = 'Init';
                $scope.modeOfOperation = 'Initiation';
                $http.get(appConstant.apiRoot + serviceEndpoint.attendeeTestDrive + '/CheckLabActivationClosed?internalId=' + encodeURIComponent($scope.CurrentTestDrive.InternalId) + '&voucherCode=' + $scope.userInviteLink)
                    .then(function (response) {
                        if (response.data) {
                            $scope.modeOfOperation = 'ActivationClosed';
                        }
                        else {
                            deployOnDemandLabForUser();
                        }
                    });
                //pollTestDriveStatus();
            }
            else {
                $scope.isExpired = true;
                notifier.notifyError($filter('translate')("ERROR_ODL_EXPIRED"));
            }
        };

        function getTestDriveData() {
            $http.get(appConstant.apiRoot + serviceEndpoint.attendeeTestDrive + '/OnDemandLab/' + $scope.SelectedTestDriveUniqueName + '/' + $rootScope.selectedLanguagekey)
                .then(function (response) {
                    response.data.Description = $sce.trustAsHtml(response.data.Description);
                    if (response.data.LabLaunchPageDescription === null || response.data.LabLaunchPageDescription === "") {
                        response.data.LabLaunchPageDescription = null;
                    }
                    else {
                        response.data.LabLaunchPageDescription = $sce.trustAsHtml(response.data.LabLaunchPageDescription);
                    }

                    $scope.isTestDriveuser = false;
                    $scope.testdrive = response.data;
                    $scope.CurrentTestDrive = response.data;
                    $scope.CurrentTestDrive.CurrentVMName = null;

                    getSignUpFields(encodeURIComponent($scope.CurrentTestDrive.InternalId));
                    if ($scope.CurrentTestDrive.QuizId !== null) {
                        $scope.tabOptions.push('Quiz');
                    }
                    if ($scope.CurrentTestDrive.SurveyGuid !== null) {
                        $scope.tabOptions.push('Survey');
                    }
                    if ($scope.CurrentTestDrive.CustomTitle) {
                        $scope.constant.mainHeading = $scope.CurrentTestDrive.CustomTitle;
                    }
                    
                    if ($scope.CurrentTestDrive.CustomPrivacyUrl) {
                        $scope.constant.privacyPolicyLink = $scope.CurrentTestDrive.CustomPrivacyUrl;
                    }
                    if ($scope.CurrentTestDrive.CustomPrivacyStatement) {
                        $scope.constant.copyrightMessage = $sce.trustAsHtml($scope.CurrentTestDrive.CustomPrivacyStatement);
                    }
                    if ($scope.CurrentTestDrive.LabPromotionMessage) {
                        $scope.CurrentTestDrive.LabPromotionMessage = $sce.trustAsHtml($scope.CurrentTestDrive.LabPromotionMessage);
                    }

                    if ($scope.CurrentTestDrive.ApprovalTypeId === 4 && $scope.CurrentTestDrive.VideoApprovalTypeId === 4) {
                        $scope.inviteOnly = true;
                    }
                    else if (($scope.CurrentTestDrive.LinkToVideo === null || $scope.CurrentTestDrive.LinkToVideo === '') && ($scope.CurrentTestDrive.LinkToInstructorVideo === null || $scope.CurrentTestDrive.LinkToInstructorVideo === '' )) {
                        if ($scope.CurrentTestDrive.ApprovalTypeId === 4) {
                            $scope.inviteOnly = true;
                        }
                        $scope.hideVideo = true;
                        ////$scope.register = { 'ODL': true };
                    }

                    if (($scope.CurrentTestDrive.ApprovalTypeId === 1 || $scope.CurrentTestDrive.ApprovalTypeId ===13) && $scope.CurrentTestDrive.StatusId === 5 && $scope.userInviteLink === null)
                    {
                        // anonymous user before launch
                        $scope.TestDriveMode = 'Anonymous';
                        $scope.modeOfOperation = 'Un-initiated';
                        $scope.showMode = 'Overview';
                        $scope.CurrentTestDriveUserData = {};
                        if ($scope.CurrentTestDrive.ApprovalTypeId === 13) {
                            $scope.showMode = 'Lab';
                            $scope.startTestDrive();
                        }
                    }
                    else if (($scope.CurrentTestDrive.ApprovalTypeId === 1 || $scope.CurrentTestDrive.ApprovalTypeId === 13) && $scope.CurrentTestDrive.StatusId === 6)
                    {
                        $scope.TestDriveMode = 'Information';
                    }
                    else if (($scope.CurrentTestDrive.ApprovalTypeId === 1 || $scope.CurrentTestDrive.ApprovalTypeId === 13) && $scope.userInviteLink !== null)
                    {
                        // anonymous user after launch
                        $scope.TestDriveMode = 'Lab';
                        $scope.modeOfOperation = 'Initiation';
                    }

                    if ($scope.TestDriveMode === 'Lab' && $scope.userInviteLink !== undefined && $scope.userInviteLink !== null) {
                        getTestDriveMode();
                    }

                    if ($scope.TestDriveMode === 'Lab' || $scope.TestDriveMode === 'Anonymous')
                    {
                        if ($scope.CurrentTestDrive.LinkToVideo !== null && $scope.CurrentTestDrive.LinkToVideo !== '') {
                            if ($scope.CurrentTestDrive.LinkToVideo.includes("vimeo")) {
                                $scope.videoId = DataService.getVideoId($scope.CurrentTestDrive.LinkToVideo);
                                $scope.videoUrl = "https://player.vimeo.com/video/" + $scope.videoId;
                            }
                            else if ($scope.CurrentTestDrive.LinkToVideo.includes("youtube")) {
                                $scope.videoId = DataService.getVideoId($scope.CurrentTestDrive.LinkToVideo);
                                $scope.videoUrl = "https://www.youtube.com/embed/" + $scope.videoId;
                            }
                            console.log($scope.videoUrl);
                            $scope.videoUrl = $sce.trustAsResourceUrl($scope.videoUrl);

                            $scope.CurrentTestDrive.ApprovalTypeId === 1 ? $scope.tabOptions.splice(1, 0, 'Video') : $scope.tabOptions.push('Video');
                        }

                        if ($scope.CurrentTestDrive.LinkToInstructorVideo !== null && $scope.CurrentTestDrive.LinkToInstructorVideo !== '') {
                            $scope.hideVideo = false;
                            if ($scope.CurrentTestDrive.LinkToInstructorVideo.includes("vimeo")) {
                                $scope.instructorVideoId = DataService.getVideoId($scope.CurrentTestDrive.LinkToInstructorVideo);
                                $scope.instructorVideoUrl = "https://player.vimeo.com/video/" + $scope.instructorVideoId;
                            }
                            else if ($scope.CurrentTestDrive.LinkToInstructorVideo.includes("youtube")) {
                                $scope.instructorVideoId = DataService.getVideoId($scope.CurrentTestDrive.LinkToInstructorVideo);
                                $scope.instructorVideoUrl = "https://www.youtube.com/embed/" + $scope.instructorVideoId;
                            }
                            console.log($scope.instructorVideoUrl);
                            $scope.instructorVideoUrl = $sce.trustAsResourceUrl($scope.instructorVideoUrl);
                            if ($scope.tabOptions.indexOf('Video') < 0) {
                                $scope.CurrentTestDrive.ApprovalTypeId === 1 ? $scope.tabOptions.splice(1, 0, 'Video') : $scope.tabOptions.push('Video');
                            }
                        }
                    }

                    $rootScope.showPageHeading = true;
                })
                .catch(function (response) {
                    $state.go('main.error');
                    $rootScope.showPageHeading = true;
                    //$state.go('main.home');
                });
        }

        function getTestDriveMode() {
            $http.get(appConstant.apiRoot + serviceEndpoint.attendeeTestDrive + '/GetAttendeeTestDrive/' + $scope.userInviteLink)
                .then(function (response) {
                    
                    //console.log(response.data);
                    $scope.CurrentTestDriveUserData = response.data;
                    loadQuiz();
                    //if ($scope.CurrentTestDrive.EnableAccessOverHttp) {
                    //    $scope.loadVirtualMachines();
                    //}

                    $scope.isTestDriveuser = $scope.CurrentTestDriveUserData.IsTestDriveUser;
                    var videoIndex = $scope.tabOptions.indexOf('Video');
                    if (!$scope.CurrentTestDriveUserData.IsTestDriveUser && $scope.videoUrl === undefined) {
                        if (videoIndex >= 0) {
                            $scope.tabOptions.splice(videoIndex, 1);
                        }
                        $scope.hideVideo = true;
                    }
                    else if ($scope.CurrentTestDriveUserData.IsTestDriveUser && $scope.instructorVideoUrl === undefined) {
                        if (videoIndex >= 0) {
                            $scope.tabOptions.splice(videoIndex, 1);
                        }
                        $scope.hideVideo = true;
                    }

                    if (response.data.IsAzurePassActive && response.data.LicenseStatus && !response.data.IsDeploymentActive){
                        grabAzurePassForUser();
                    }
                    else if (response.data.IsAzurePassActive && !response.data.IsDeploymentActive) {
                        $scope.modeOfOperation = 'GrabAzurePass';
                    }
                    else if (response.data.ADSetupStatus && response.data.IsDeploymentActive) {
                        // currently running
                        $scope.modeOfOperation = 'Initiation';
                        //pollTestDriveStatus();
                        deployOnDemandLabForUser();
                    }
                    else if (!response.data.IsDeploymentActive && (response.data.DeploymentStatus === "Deleted" || response.data.DeploymentStatus === "Deleting")) {
                        // already executed
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else if (!response.data.ADSetupStatus && response.data.IsActive) {
                        // not yet init
                        $scope.modeOfOperation = 'Un-initiated';
                    }
                    else if (response.data.ADSetupStatus && response.data.IsActive && response.data.CurrentStatus === "Failed")
                    {
                        $scope.modeOfOperation = 'Failed';
                        isDeploying = false;
                    }
                    else if (response.data.ADSetupStatus && response.data.IsActive && response.data.DeploymentStatus === null) {
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else {
                        // expired
                        $scope.modeOfOperation = 'Expired';
                    }
                })
                .catch(function (ex) {
                    $state.go('main.error');
                });
        }

        function deployOnDemandLabForUser()
        {
            $scope.modeOfOperation = 'Initiation';
            var url = appConstant.apiRoot + '/api/AttendeeTestDrive/InitiateDeployment/' + encodeURIComponent($scope.CurrentTestDrive.InternalId);
            if ($scope.userInviteLink !== null && $scope.userInviteLink !== undefined) {
                url = url + '/' + $scope.userInviteLink;
            }
                
            $http.get(url)
                .then(function (response) {
                    if (response.data.Result !== null && response.data.Result.ErrorMessage === "Lab already completed") {
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else {
                        $scope.modeOfOperation = 'Initiation';
                        $scope.CurrentTestDriveUserData.Status = response.data;
                        $scope.VMLaunchURLs = response.data.VMLaunchURL;
                        if ($scope.userInviteLink === null || $scope.userInviteLink === undefined) {
                            // anonymous user
                            $scope.userLink = appConstant.studentPortalUrl + "#/odl/" + $scope.CurrentTestDrive.UniqueName + "/" + response.data.VoucherCode;
                            $window.open($scope.userLink, '_self');
                        }
                        else {
                            if (response.data.DeploymentStatus === "Succeeded" && response.data.Status === 12) {
                                $scope.modeOfOperation = 'In-Progress';
                                isDeploying = false;
                                var startTime = response.data.StartTime;
                                stopPolling();
                                if (!$scope.CurrentTestDrive.BlockExpiration) {
                                    findRemainingDuration($scope.CurrentTestDriveUserData.Status.StartTime, $scope.CurrentTestDriveUserData.Status.Duration);
                                }

                                if ($scope.minutes < 0 && !$scope.CurrentTestDrive.EnableAzurePass) {
                                    $scope.modeOfOperation = 'Deallocated';
                                }
                                else if ($scope.VMLaunchURLs.length === 1 && $scope.CurrentTestDriveUserData.Status.IsGitDocAvailable) {
                                    ////$scope.CurrentTestDrive.ApprovalTypeId === 13 &&
                                    var launchLaburl = appConstant.studentPortalUrl + '/#/labenvironment/' + $scope.SelectedTestDriveUniqueName + '/' + $scope.CurrentTestDriveUserData.Status.VoucherCode + '/' + $scope.VMLaunchURLs[0].InternalId;
                                    $window.open(launchLaburl, "_self");
                                }
                                else if ($scope.CurrentTestDriveUserData.Status.IsGitDocAvailable && $scope.CurrentTestDrive.ACIDeploymentType === null) {
                                    //$scope.CurrentTestDrive.ApprovalTypeId === 13 && 
                                    var Labguidurl = appConstant.studentPortalUrl + '/#/labguide/' + $scope.SelectedTestDriveUniqueName + '/' + $scope.CurrentTestDriveUserData.Status.VoucherCode;
                                    $window.open(Labguidurl, "_self");
                                }
                            }
                            else if (response.data.DeploymentStatus === "Policy failed after deployment succeeded") {
                                $scope.modeOfOperation = 'Policy_Failed_After_Deployment';
                                isDeploying = false;
                            }
                            else if (response.data.DeploymentStatus === "Failed") {
                                $scope.modeOfOperation = 'Failed';
                                isDeploying = false;
                            }
                            else if (response.data.DeploymentStatus === "Deleting") {
                                $scope.modeOfOperation = 'Deallocating';
                            }
                            else if (response.data.DeploymentStatus === "Deleted") {
                                $scope.modeOfOperation = 'Deallocated';
                            }
                            else {
                                isDeploying = true;
                                startPolling();
                                $scope.modeOfOperation = 'Initiation';
                            }
                        }
                    }
                })
                .catch(function (ex) {
                    //console.log(ex);
                    if (ex.data.ErrorDetail === "Lab already completed")
                    {
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else
                    {
                        $scope.error = ex.data.ErrorDetail;
                        $scope.modeOfOperation = 'Failed';
                    }
                });
        };

        function grabAzurePassForUser() {
            $scope.modeOfOperation = "AzurePassInitiation";
            var url = appConstant.apiRoot + '/api/AttendeeTestDrive/GrabAzurePass/' + encodeURIComponent($scope.CurrentTestDrive.InternalId);
            if ($scope.userInviteLink !== null || $scope.userInviteLink !== undefined)
                url = url + '/' + $scope.userInviteLink;
            $http.get(url)
                .then(function (response) {
                    if (response.data.Result === null) {
                        $scope.modeOfOperation = "AzurePassUserDetails";
                        $scope.CurrentTestDriveUserData.Status = response.data;
                        $scope.CurrentTestDriveUserData.Status.CloudPlatformId = 1;
                    }
                    else {
                        $scope.error = response.data.Result.ErrorMessage;
                        $scope.modeOfOperation = 'Failed';
                    }
                });
        };

        $scope.submitAzurePassSubscription = function () {
            this.frmManageAzurePassSubscription.$submitted = true;
            var url = appConstant.apiRoot + '/api/AttendeeTestDrive/CreateAzurePassSubscription/' + encodeURIComponent($scope.CurrentTestDrive.InternalId);
            if ($scope.userInviteLink !== null || $scope.userInviteLink !== undefined)
                url = url + '/' + $scope.userInviteLink;
            $http.post(url, $scope.CurrentAzurePassSubscription).
                then(function (response) {
                    $scope.modeOfOperation = "AzurePassUserDetails";
                    $scope.CurrentTestDriveUserData.Status = response.data;
                    if ($scope.CurrentTestDriveUserData.Status.Result == null && $scope.CurrentTestDriveUserData.Status.ConfiguredAzurePassSubscription) {
                        notifier.notify($filter('translate')("MESSAGE_ONBOARDED"));
                    }
                    else {
                        notifier.notifyError($filter('translate')("MESSAGE_FAILED_TO_ADD_SUB", { exceptionMessage: $scope.CurrentTestDriveUserData.Status.Result.ErrorMessage}));
                        $scope.error = $scope.CurrentTestDriveUserData.Status.Result.ErrorMessage;
                        $scope.modeOfOperation = 'Failed';
                    }
                   
                }, function (ex) {
                    $scope.error = ex.data.ErrorDetail;
                    $scope.modeOfOperation = 'Failed';
                });
        }

        function findRemainingDuration(startTime, actualDuration) {
            var start = moment.utc(startTime, "YYYY-MM-DD HH:mm:ss");
            var current = moment.utc(new Date(), "HH:mm");
            var duration = moment.duration(current.diff(start));

            var actualDuration = moment.duration(actualDuration, 'hours');
            var remainingDuration = actualDuration.subtract(duration);
            $scope.day = parseInt(remainingDuration.asDays());
            //$scope.day = remainingDuration.get('days')
            $scope.hours = remainingDuration.get('hours');
            if ($scope.day > 0) {
                var daysHours = $scope.day * 24;
                $scope.hours = daysHours + $scope.hours;
            }
            $scope.minutes = remainingDuration.get('minutes');
            countdown();
        };

        var countDownTimer;

        function countdown() {
            countDownTimer = $timeout(function () {
                $scope.minutes--;

                if ($scope.minutes < 0) {
                    $scope.minutes = 59;
                    $scope.hours--;

                    if ($scope.hours < 0) {
                        stopTimerFunc();
                    }
                }

                countdown();
            }, 60000);
        };

        var stopTimer = true;
        function stopTimerFunc() {
            if (stopTimer) {
                $timeout.cancel(countDownTimer);
                $scope.minutes = 0;
                $scope.hours = 0;
                $scope.modeOfOperation = 'Deallocated';
                ModalService.showModal({
                    templateUrl: '../app/views/shared/successModal.html',
                    controller: "ModalController",
                    inputs: {
                        title: $filter('translate')("SESSION_TIMEOUT"),
                        description: $filter('translate')("ERROR_TIMEOUT_DURATION"),
                        failureButtonText: "",
                        successButtonText: $filter('translate')("OK")
                    }
                }).then(function (modal) {
                    modal.element.modal();
                    modal.close.then(function (result) {
                        $state.go('main.home');
                    })
                        .catch(function () {
                            $state.go('main.home');
                        });
                });

                stopTimer = false;
            }
        }

        function startPolling() {
            if (!isPolling) {
                isPolling = true;
                polling = $interval(deployOnDemandLabForUser, appConstant.pollIntervalInMinutes * 60000);
            }
        }

        function stopPolling() {
            if (isPolling) {
                $interval.cancel(polling);
                isPolling = false;
            }
        }

        $scope.completeTestDrive = function () {
            ModalService.showModal({
                templateUrl: '../app/views/shared/modal.html',
                controller: "ModalController",
                inputs: {
                    title: $filter('translate')("DANGER"),
                    description: $filter('translate')("MESSAGE_DEALLOCATE"),
                    failureButtonText: $filter('translate')("CANCEL"),
                    successButtonText: $filter('translate')("OK")
                }
            }).then(function (modal) {
                modal.element.modal();
                modal.close.then(function (result) {
                    if (result == 'Yes') {
                        $scope.modeOfOperation = 'Deallocating';
                        $http.get(appConstant.apiRoot + '/api/AttendeeTestDrive/CompleteTestDrive/' + encodeURIComponent($scope.CurrentTestDriveUserData.Status.InternalId))
                            .then(function (response) {
                                if (response) {
                                    $scope.modeOfOperation = 'Deallocated';
                                }
                                else {
                                    $scope.error = "We ran into some problem deallocating your On Demand Lab. However, your On Demand Lab has ended.";
                                    $scope.modeOfOperation = 'Failed';
                                }
                            })
                    }
                });
            });
        }

        //login
        $scope.login = function () {
            //adalService.login();
            //$scope.redirectUser();
            $state.go('loggedIn.html')

        };

        //logout
        $scope.logout = function () {
            //adalService.logout();

        };

        $scope.changeTabOption = function (option) {
            $scope.showMode = option;
        };

        $scope.changeLabDetails = function (option) {
            $scope.labDetailsShowMode = option;
            if ($scope.labDetailsShowMode == "VM") {
                $scope.loadVirtualMachines();
            }
            else if ($scope.labDetailsShowMode == "VMSnapshot") {
                $scope.loadVirtualMachines();
            }
            else if ($scope.labDetailsShowMode == "LabValidation") {
                $scope.getLabValidationData($scope.CurrentTestDriveUserData.Status.VoucherCode);
            }
            else if ($scope.labDetailsShowMode == "Progress") {
                $scope.getAttendeeLeaderboard($scope.CurrentTestDriveUserData.Status.VoucherCode);
            }
        };

        $scope.loadVirtualMachines = function () {
            $scope.resourcesDataSource = new ngTableParams({ page: 1, count: 50 }, {
                counts: [],
                getData: function ($defer, params) {
                    $http.get(appConstant.apiRoot + '/api/AttendeeTestDrive/GetVirtualMachines/' + $scope.CurrentTestDriveUserData.Status.VoucherCode).then(function (response) {
                        $scope.VirtualMachines = response.data;
                        if (response.data.length > 0) {
                            $scope.CurrentTestDrive.CurrentVMName = response.data[0].ResourceName;
                            $scope.loadVMSnapshots();
                        }

                        params.total(response.data.length);
                        $defer.resolve(response.data.slice((params.page() - 1) * params.count(), params.page() * params.count()));
                    });
                }
            });
        };

        // Get VM Snapshots
        $scope.loadVMSnapshots = function () {
            $scope.vmSnapshotDataSource = new ngTableParams({ page: 1, count: 50 }, {
                counts: [],
                getData: function ($defer, params) {
                    $http.get(appConstant.apiRoot + '/api/AttendeeTestDrive/GetVMSnapshotsByAttedee/' + $scope.CurrentTestDriveUserData.Status.VoucherCode + '/' + $scope.CurrentTestDrive.CurrentVMName).then(function (response) {
                        if (response.data.length > 0) {
                            $scope.lastRestoredFrom = response.data[0].LastRestoredFrom;
                        }
                        else {
                            $scope.lastRestoredFrom = null;
                        }
                        params.total(response.data.length);
                        $defer.resolve(response.data.slice((params.page() - 1) * params.count(), params.page() * params.count()));
                    });
                }
            });
        };

        // Backup VM (Processing)
        $scope.backupVM = function () {
            var vmName = $scope.CurrentTestDrive.CurrentVMName;
            angular.forEach($scope.VirtualMachines, function (vm) {
                if (vm.ResourceName == vmName) {
                    $scope.CurrentVM = vm;
                }
            });

            $scope.virtualMachineOperations($scope.CurrentVM, '9');
        }

        // Restore VM from Snapshot
        $scope.restoreVM = function (row) {
            ModalService.showModal({
                templateUrl: '../app/views/shared/modal.html',
                controller: "ModalController",
                inputs: {
                    title: "Are you sure you want to continue with this action?",
                    description: "Warning: This action will restore VM with the selected Snapshot. Restore process will take a few minutes. Are you sure you want to proceed? ",
                    failureButtonText: "Cancel",
                    successButtonText: "OK"
                }
            }).then(function (modal) {
                modal.element.modal();
                modal.close.then(function (result) {
                    if (result == 'Yes') {
                        $scope.RestoreInProgress = true;
                        $http.post(appConstant.apiRoot + '/api/AttendeeTestDrive/RestoreVM/' + $scope.CurrentTestDriveUserData.Status.VoucherCode+ '/' + row.Id)
                            .then(function (response) {
                                $scope.RestoreInProgress = false;
                                if (response.data.IsSuccess) {
                                    $scope.vmSnapshotDataSource.reload();
                                    notifier.notify("Restored successfully!");
                                }
                                else {
                                    notifier.notifyError(response.data.ErrorMessage);
                                }
                            });
                    }
                });
            });
        }

        // Delete VM Snapshot
        $scope.deleteSnapshot = function (row) {
            ModalService.showModal({
                templateUrl: '../app/views/shared/modal.html',
                controller: "ModalController",
                inputs: {
                    title: "Are you sure you want to continue with this action?",
                    description: "Warning: This action will delete the selected Snapshot from Azure. Are you sure you want to proceed?",
                    failureButtonText: "Cancel",
                    successButtonText: "OK"
                }
            }).then(function (modal) {
                modal.element.modal();
                modal.close.then(function (result) {
                    if (result == 'Yes') {
                        $http.delete(appConstant.apiRoot + '/api/AttendeeTestDrive/DeleteVMSnapshotByAttendee/' + row.Id)
                            .then(function (response) {
                                if (response.data.IsSuccess) {
                                    $scope.vmSnapshotDataSource.reload();
                                    notifier.notify("Snapshot has been deleted successfully!");
                                }
                                else {
                                    notifier.notifyError(response.data.ErrorMessage);
                                }
                            });
                    }
                });
            });
        };

        $scope.openVMLaunchURL = function (url) {
            $window.open(url, '_blank');
        };

        $scope.openGitDoc = function () {
            $scope.showDocuemnt = false;
            var newTabUrl = appConstant.studentPortalUrl + '/#/labguide/' + $scope.SelectedTestDriveUniqueName + '/' + $scope.CurrentTestDriveUserData.Status.VoucherCode;
            $window.open(newTabUrl, '_blank');
        };

        $scope.openVMandGitDoc = function (dataRow) {
            var newTabUrl = appConstant.studentPortalUrl + '/#/labenvironment/' + $scope.SelectedTestDriveUniqueName + '/' + $scope.CurrentTestDriveUserData.Status.VoucherCode + '/' + dataRow.InternalId;
            $window.open(newTabUrl, '_blank');
        };

        $scope.submitUser = function () {
            var isValid = true;
            $scope.isExpired = false;

            if ($scope.testdrive.EnableVoucher) {
                if ($scope.CurrentUser.VoucherCode) {
                    isValid = true;
                }
                else {
                    notifier.notifyError($filter('translate')("MESSAGE_PROVIDE_VOUCHER"));
                    isValid = false;
                }
            }

            //console.log($scope.CurrentUser);
            var localTime = moment(localTime).format('YYYY-MM-DD');
            var stillUtc = moment($scope.CurrentTestDrive.EndDate);
            var expiryDateToLocal = moment(stillUtc).format('YYYY-MM-DD');

            //Checking if the ODL is expired
            if (localTime <= expiryDateToLocal) {
                $scope.isExpired = false;
            }
            else {
                $scope.isExpired = true;
                notifier.notifyError($filter('translate')("ERROR_ODL_EXPIRED"));
            }

            this.frmManageUser.$submitted = true;
            if (this.frmManageUser.$valid && $scope.validOfficeEmail && isValid && !$scope.isExpired) {
                $http.post(appConstant.apiRoot + serviceEndpoint.onDemandLabUser + '/Register?internalId=' + encodeURIComponent($scope.CurrentTestDrive.InternalId), $scope.CurrentUser).then(function (response) {
                    if (response.data.Result.Status === "Success") {
                        $scope.userLink = response.data.VoucherCode;
                        notifier.notify($filter('translate')("REGISTRATION_COMPLETED"));
                        $scope.registered = true;
                        if ($scope.CurrentTestDrive.MockExamGuid === null) {
                            $scope.userLink = appConstant.studentPortalUrl + "#/odl/" + $scope.CurrentTestDrive.UniqueName + "/" + $scope.userLink;
                            if ($scope.CurrentTestDrive.ApprovalTypeId == 2 || $scope.CurrentTestDrive.ApprovalTypeId == 10 || $scope.CurrentTestDrive.ApprovalTypeId == 11) {
                                $window.open($scope.userLink, '_self');
                            }
                        }
                        else {
                            var url = appConstant.studentPortalUrl + "#/mockexam/" + $scope.CurrentTestDrive.MockExamGuid + "/" + $scope.userLink;
                            $window.open(url, '_self');
                        }
                    }
                    else if (response.data.Result.ErrorMessage == 'User already registered! An email has been sent to launch the lab!' || response.data.Result.ErrorMessage == 'User already has an active deployment! An email has been sent to launch the lab!') {
                        var error = null;
                        if (response.data.Result.ErrorMessage == 'User already registered! An email has been sent to launch the lab!') {
                            error = $filter('translate')("MESSAGE_ALREADY_REGISTERED");
                        }
                        else {
                            error = $filter('translate')("MESSAGE_ACTIVE_DEPLOYMENT");
                        }

                        notifier.notifyInfo(error);
                    }
                    else {
                        notifier.notifyError(response.data.Result.ErrorMessage);
                    }
                })
                    .catch(function (ex) {
                        notifier.notifyError(ex.data.ErrorDetail);
                    });
            }
            else {
                angular.element('input.ng-invalid').first().focus();
            }
        };

        $scope.checkIsValidInput = function () {
            var format = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;
            var workPhoneFormat = /[!@#$%^&*()_\=\[\]{};':"\\|,.<>\/?]/;
            var firstName = $scope.CurrentUser.FirstName;
            var lastName = $scope.CurrentUser.LastName;
            var organization = $scope.CurrentUser.Organization;
            var workPhone = $scope.CurrentUser.WorkPhone;
            if (format.test(firstName))
                $scope.validFirstName = false;
            else
                $scope.validFirstName = true;
            if (format.test(lastName))
                $scope.validLastName = false;
            else
                $scope.validLastName = true;
            if (format.test(organization))
                $scope.validOrganization = false;
            else
                $scope.validOrganization = true;
            if (workPhoneFormat.test(workPhone))
                $scope.validWorkPhone = false;
            else
                $scope.validWorkPhone = true;
        }

        /// <summary>
        /// Validate valid work email
        /// </summary>
        $scope.checkIsWorkEmail = function () {
            var email = $scope.CurrentUser.Email.split('@'); //split email into two at '@'
            if (email.length > 1) //check for 2 valid parts
                $scope.validOfficeEmail = true;
            else
                $scope.validOfficeEmail = false;
            var emailFormat = email[1].split('.'); //split domain part into two at '.'
            if (emailFormat.length > 1) //check for 2 valid parts
                $scope.validOfficeEmail = true;
            else
                $scope.validOfficeEmail = false;

            //check for valid email parts, between '@' and '.' of domain
            if (emailFormat[0].length == 0 || email[0].length == 0 || emailFormat[1].length == 0 || email[1].length == 0)
                $scope.validOfficeEmail = false;

            if (!$scope.CurrentTestDrive.AllowPersonalEmailAddressesForRegistration) {
                if ($scope.validOfficeEmail) //if all validations passed
                {
                    for (var i = 0; i < invalidEmails.length; i++) {
                        if (emailFormat[0].toLowerCase() == invalidEmails[i]) //check if from public domain
                        {
                            $scope.validOfficeEmail = false;
                            break;
                        }
                        else {
                            $scope.validOfficeEmail = true;
                        }
                    }
                }
            }
            else {
                $scope.validOfficeEmail = true;
            }
        };

        $scope.confirmCopy = function () {
            notifier.notify($filter('translate')("MESSAGE_COPIED"));
        };

        function loadQuiz() {
            if ($scope.CurrentTestDrive.QuizId != null) {
                $http.get(appConstant.apiRoot + '/api/Poll/GetQuizForUser?pollId=' + $scope.CurrentTestDrive.QuizId)
                    .then(function (response) {
                        $scope.Quiz = response.data;
                        if ($scope.Quiz === null) {
                            $scope.EmptyQuiz = true;
                        }
                        else {
                            $scope.QuizName = response.data.Name;
                        }
                    });
            }
        };

        $scope.QuizResponse = { };
        $scope.QuizResponse.Responses = [];
        var temp = [];
      
        $scope.submitQuizResponse = function () {
            $scope.QuizResponse = { PollId: $scope.Quiz.Id, InviteLink: $scope.userInviteLink, PollType: 'quiz' };
            for (var i = 0; i < $scope.Quiz.Questions.length; i++) {
                if ($scope.Quiz.Questions[i].Type == 'radio') {
                    if ($scope.Quiz.Questions[i].Response != undefined) {
                        for (var j = 0; j < $scope.Quiz.Questions[i].Options.length; j++) {
                            if ($scope.Quiz.Questions[i].Options[j].Id == parseInt($scope.Quiz.Questions[i].Response)) {
                                temp.push({ 'QuestionId': $scope.Quiz.Questions[i].Id, 'AnswerId': $scope.Quiz.Questions[i].Options[j].Id });
                            }
                        }
                    }
                    else {
                        temp.push({ 'QuestionId': $scope.Quiz.Questions[i].Id, 'AnswerId': 0 });
                    }
                }
                else if ($scope.Quiz.Questions[i].Type === 'checkbox') {
                    for (var j = 0; j < $scope.Quiz.Questions[i].Options.length; j++) {
                        if ($scope.Quiz.Questions[i].Options[j].selected != undefined && $scope.Quiz.Questions[i].Options[j].selected == true) {
                            temp.push({ 'QuestionId': $scope.Quiz.Questions[i].Id, 'AnswerId': $scope.Quiz.Questions[i].Options[j].Id });
                        }
                    }
                }
            }

            $scope.QuizResponse.Responses = temp;
            $scope.QuizResponse.EventInternalId = encodeURIComponent($scope.CurrentTestDrive.InternalId);
            //Save Response
            $http.post(appConstant.apiRoot + '/api/Response?pollId=' + $scope.QuizResponse.PollId, $scope.QuizResponse)
                .then(function (response) {
                    $scope.Quiz = response.data;
                    $scope.ResponseReceived = true;
                    $scope.QuizResponse = {};
                    $scope.QuizResponse.Responses = [];
                    temp = [];
                });
        };

        $scope.submitCheckboxResponse = function (question) {
            for (var i = 0; i < question.Options.length; i++) {
                if (question.Options[i].selected != undefined && question.Options[i].selected == true) {
                    temp.push({ 'QuestionId': question.Id, 'AnswerId': question.Options[i].Id });
                }
            }
        };

        $scope.redoQuiz = function () {
            loadQuiz();
            $scope.ResponseReceived = false;
        };

        $scope.refresh = function () {
            getTestDriveData();
        };

        $scope.virtualMachineOperations = function (dataRow, type) {
            var action = "";
            switch (type) {
                case "6": action = "start";
                    break;
                case "7": action = "deallocate";
                    break;
                case "8": action = "restart";
                    break;
                case "9": action = "backup";
                    break;
            }

            ModalService.showModal({
                templateUrl: '../app/views/shared/modal.html',
                controller: "ModalController",
                inputs: {
                    title: "Are you sure you want to continue with this action?",
                    description: "Warning: This action will " + action + " the virtual machine " + dataRow.ResourceName + ". Are you sure you want to proceed? ",
                    failureButtonText: "Cancel",
                    successButtonText: "OK"
                }
            }).then(function (modal) {
                modal.element.modal();
                modal.close.then(function (result) {
                    if (result == 'Yes') {
                        $scope.BackupInProgress = true;
                        $http.get(appConstant.apiRoot + '/api/AttendeeTestDrive/VirtualMachineOperations/' + type + '/' + $scope.CurrentTestDriveUserData.Status.CloudPlatformId + '/' + dataRow.SubscriptionId + '/' + dataRow.ResourceGroupName + '/' + dataRow.ResourceName + '/' + $scope.CurrentTestDriveUserData.Status.VoucherCode)
                            .then(function (response) {
                                $scope.BackupInProgress = false;
                                if (response.data.IsSuccess) {
                                    if (type == 6) {
                                        notifier.notify($filter('translate')("MESSAGE_VM_START"));
                                    }
                                    else if (type == 7) {
                                        notifier.notify($filter('translate')("MESSAGE_VM_STOP"));
                                    }
                                    else if (type == 8) {
                                        notifier.notify($filter('translate')("MESSAGE_VM_RESTART"));
                                    }
                                    else if (type == 9) {
                                        notifier.notify($filter('translate')("MESSAGE_VM_BACKUP"));
                                    }

                                    if (type == 9) {
                                        $scope.loadVMSnapshots();
                                    }
                                    else {
                                        loadVirtualMachines();
                                    }
                                }
                                else {
                                    notifier.notifyError(response.data.ErrorMessage);
                                }
                            });
                    }
                });
            });
        };

        $scope.validWorkPhone = true;
        $scope.FnameFlag = false;
        $scope.LnameFlag = false;
        $scope.OrgFlag = false;
        $scope.CountryFlag = false;
        $scope.JobFlag = false;
        $scope.PhoneFlag = false;
        $scope.StateFlag = false;
        $scope.EmailFlag = false;

        $scope.getAttendeeLeaderboard = function (voucher) {
            $http.get(appConstant.apiRoot + '/api/TemplateValidation/GetLeaderboardForAttendee/' + voucher)
                .then(function (response) {
                    $scope.AttendeeLeaderboard = response.data;
                });
        }

        function getLeaderboard() {
            $http.get(appConstant.apiRoot + '/api/TemplateValidation/GetLeaderboard/' + $scope.SelectedTestDriveUniqueName)
                .then(function (response) {
                    $scope.Leaderboard = response.data;
                });
        }

        $scope.goToLeaderboard = function () {
            var userDirectUrl = "#/odl/" + $scope.CurrentTestDrive.UniqueName + "/leaderboard";
            $window.open(userDirectUrl, '_blank');
        };

        $scope.getLabValidationSummary = function (lab) {
            $scope.CurrentLab = lab;
            changeModeTo('LabValidationSummary');
            $scope.getLabValidationData(lab.Voucher)
        }

        $scope.getLabValidationData = function (voucher) {
            $http.get(appConstant.apiRoot + '/api/TemplateValidation/GetValidationStatusForAttendee/' + voucher + '/false')
                .then(function (response) {
                    $scope.LabValidationData = response.data[0];
                    $scope.templateValidationModules = $scope.LabValidationData.TemplateValidationStatus;
                });
        }

        $scope.validateModule = function (validationModule) {
            var exercises = validationModule.Exercises;
            if ($scope.CurrentStepIdCollection.length == 0) {
                angular.forEach(exercises, function (exercise) {
                    angular.forEach(exercise.Steps, function (step) {
                        if (step.ValidationType != 'manual' || step.HasAttendeeParameter == false) {
                            $scope.CurrentStepIdCollection.push(step.StepId);
                        }
                    });
                });
            }

            $http.post(appConstant.apiRoot + '/api/TemplateValidation/ValidateTemplateModule/' + $scope.CurrentTestDriveUserData.Status.VoucherCode, $scope.CurrentStepIdCollection)
                .then(function (response) {
                    $scope.getLabValidationData($scope.CurrentTestDriveUserData.Status.VoucherCode);
                    if ($scope.manualStep == true) {
                        notifier.notify("Data has been submitted for validation successfully");
                    }
                    else {
                        notifier.notify("Validated the data successfully");
                    }
                    $scope.CurrentStepIdCollection = [];
                });
        }

        $scope.validateManualStep = function (validationModule, step) {
            $scope.selectedModule = validationModule.ModuleId;
            if (step.ValidationType == 'manual') {
                $scope.manualStep = true;
            }
            $scope.CurrentStepIdCollection.push(step.StepId);

            if (step.ValidationType == 'custom') {
                $http.get(appConstant.apiRoot + '/api/TemplateValidation/GetAttendeeParameters/' + step.StepId + '/' + $scope.CurrentTestDriveUserData.Status.VoucherCode).
                    then(function (response) {
                        $scope.attendeeParameters = response.data;
                        if ($scope.attendeeParameters.length > 0) {
                            ModalService.showModal({
                                scope: $scope,
                                templateUrl: '../app/views/shared/validationParameter.html',
                                controller: "ModalController",
                                inputs: {
                                    title: "Parameters",
                                    description: "Please provide appropriate parameter values.",
                                    failureButtonText: "Cancel",
                                    successButtonText: "Submit"
                                }
                            }).then(function (modal) {
                                modal.element.modal();
                                modal.close.then(function (result) {
                                    if (result.IsSubmitted == 'Yes') {
                                        $scope.AttendeeValues = {};
                                        $scope.AttendeeValues.Parameters = result;
                                        $scope.AttendeeValues.InviteLink = $scope.CurrentTestDriveUserData.Status.VoucherCode;
                                        $scope.AttendeeValues.StepId = step.StepId;
                                        $http.post(appConstant.apiRoot + '/api/TemplateValidation/ValidateCustomTemplateStep', $scope.AttendeeValues).
                                            then(function (response) {
                                                $scope.getLabValidationData($scope.CurrentTestDriveUserData.Status.VoucherCode);
                                                notifier.notify("Validated the data successfully");
                                                $scope.CurrentStepIdCollection = [];
                                        });
                                    }
                                });
                            });
                        }
                        else {
                            $scope.validateModule(validationModule);
                        }
                    });
            }
            else {
                $scope.validateModule(validationModule);
            }
        }

        function getSignUpFields(internalId) {
            $http.get(appConstant.apiRoot + '/api/Customization/GetSignUpFieldsByEventId?eventId=' + 0 + '&InternalId=' + internalId).
                then(function (response) {
                    $scope.CustomizedFields = response.data;
                    $scope.EmailFlag = true;
                    if (response.data.length == 0) {
                        $scope.CustomizedFields = response.data;
                        $scope.FnameFlag = true;
                        $scope.LnameFlag = true;
                        $scope.OrgFlag = true;
                        $scope.CountryFlag = true;
                        //$http.get(appConstant.apiRoot + '/api/Customization/GetSignUpFields').
                        //    then(function (response) {
                                //for (var i = 0; i < response.data.length; i++) {
                                //    if ($scope.CustomizedFields[i].FieldId != 105 && $scope.CustomizedFields[i].FieldId != 106) {
                                //        $scope.CustomizedFields[i].IsVisible = true;
                                       
                                //    }
                                //}
                            //});
                    }
                    else {
                        for (var i = 0; i < response.data.length; i++) {
                            if ($scope.CustomizedFields[i].FieldId == 100 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.FnameFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId == 101 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.LnameFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId == 103 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.OrgFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId == 104 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.CountryFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId == 105 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.JobFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId == 106 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.PhoneFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId == 107 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.StateFlag = true;
                            }
                        }
                    }
                });
        }

        $scope.Instructions = [
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_01.md',
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_02.md',
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_03.md',
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_04.md',
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_05.md',
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_06.md',
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_07.md',
            'https://raw.githubusercontent.com/MicrosoftLearning/10979-Introduction-to-Azure-for-IT-Professionals/master/Instructions/10979F_LAB_08.md'
        ];

        $scope.firstpage = true;
        $scope.currentPageCount = 0;
        $scope.lastpage = false;
        if ($scope.Instructions.length > 0) {
            $scope.loadpage = $scope.Instructions[0];
        }
        $scope.pageNavigation = function (usage) {
            if (usage === "Next") {
                $scope.firstpage = false;
                $scope.currentPageCount = $scope.currentPageCount + 1;
                if ($scope.currentPageCount === $scope.Instructions.length-1) {
                    $scope.lastpage = true;
                }
            }
            else if (usage === "Previous") {
                $scope.currentPageCount = $scope.currentPageCount - 1;
                $scope.lastpage = false;
                if ($scope.currentPageCount === 0) {
                    $scope.firstpage = true;
                }
            }

            if ($scope.currentPageCount < $scope.Instructions.length) {
               
                $scope.loadpage = $scope.Instructions[$scope.currentPageCount];
            }
            else {
                $scope.loadpage = $scope.Instructions[0];
            }

            $scope.loadMDFile();
        };

        $scope.loadMDFile = function () {
            if ($scope.loadpage !== undefined && $scope.loadpage !== null) {
                Flatdoc.run({
                    fetcher: Flatdoc.file($scope.loadpage)
                });

                $(document).on('flatdoc:ready', function () {
                    var code = $("div.htmlCode").html();
                    $("div.htmlCode").empty();
                    code = code.replace('<inject key="AzureAdUserEmail"></inject>', 'TestUserName');
                    code = code.replace('<inject key="AzureAdUserPassword"></inject>', 'TestPassword');
                    $("div.htmlCode").append(code);
                });
            }
        };

        $scope.checked = false;
        $scope.size = '400px';
        $scope.toggle = function () {
            $scope.checked = !$scope.checked;
            if ($scope.checked) {
               $scope.loadMDFile();
            }
        };

        $scope.onopen = function () {
            alert('Open');
            console.log(this, $scope);
        };
        $scope.onclose = function () {
            alert('Close');
            console.log($scope);
        };

        $scope.mockRouteChange = function () {
            $scope.$broadcast('$locationChangeStart');
        };

        $timeout(function () {
            $rootScope.handleContentHeight();
        }, 500);

        var isACIPolling = false;
        var aciPolling;
        $scope.ACIDeploymentMode = "Un-Initiated";
        $scope.deployACI = function () {
            $scope.ACIDeploymentMode = "Deploying";
            $http.get(appConstant.apiRoot + '/api/AttendeeTestDrive/InitiateACIDeployment?voucherCode=' + $scope.userInviteLink).
                then(function (response) {
                    $scope.ACIDeploymentResult = response.data;
                    $scope.ACIDeploymentMode = $scope.ACIDeploymentResult.Status;
                    if ($scope.ACIDeploymentResult.Status === "Succeeded") {
                        $scope.VMLaunchURLs = $scope.ACIDeploymentResult.Data;
                        stopACIPolling();
                    }
                    else if ($scope.ACIDeploymentResult.Status === "Deploying") {
                        startACIPolling();
                    }
                });
        };

        function startACIPolling() {
            if (!isACIPolling) {
                isACIPolling = true;
                aciPolling = $interval($scope.deployACI, 60000);
            }
        }

        function stopACIPolling() {
            if (isACIPolling) {
                $interval.cancel(aciPolling);
                isACIPolling = false;
            }
        }
    }
})();