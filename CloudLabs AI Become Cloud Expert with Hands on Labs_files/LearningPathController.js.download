(function () {
    'use strict';
    angular
        .module('cloudsandbox.studentportal')
        .controller('LearningPathController', LearningPathController);

    LearningPathController.$inject = ['$scope', '$rootScope', '$state', '$stateParams', '$window', '$location', '$sce', '$interval', '$timeout', 'notifier', 'DataService', '$http', 'appConstant', 'serviceEndpoint', 'adalAuthenticationService', 'ModalService', 'ngTableParams', '$filter'];

    /// <summary>
    /// Controller for learning paths.
    /// </summary>
    function LearningPathController($scope, $rootScope, $state, $stateParams, $window, $location, $sce, $interval, $timeout, notifier, DataService, $http, appConstant, serviceEndpoint, adalService, ModalService, ngTableParams, $filter) {
        $rootScope.showHeader = false;
        $rootScope.showfooter = false;
        $scope.height = $window.innerHeight;
        $scope.TestDriveMode = "Information";
        var invalidEmails = ["gmail", "yahoo", "hotmail", "live", "outlook", "msn"];
        $scope.validOfficeEmail = true;
        $scope.validFirstName = true;
        $scope.validLastName = true;
        $scope.validOrganization = true;
        $scope.Modules = [];
        $scope.LearningPathMode = 'Overview';
        $scope.selectedPage = null;
        $scope.splitScreen = true;
        $scope.rdpSRC = null;
        $scope.hasLab = false;
        
        $scope.SelectedTestDriveUniqueName = $stateParams.testdriveId;
        $scope.VoucherCode = $stateParams.userInviteLink;

        if ($scope.SelectedTestDriveUniqueName === undefined)
            $state.go('main.home');

        if ($scope.VoucherCode !== undefined && $scope.VoucherCode !== null) {
            $http.get(appConstant.apiRoot + '/api/TemplateValidation/GetValidationStatusForAttendee/' + $scope.VoucherCode + '/false')
                .then(function (response) {
                    if (response.data !== null && response.data.length > 0)
                        $scope.Modules = response.data[0].TemplateValidationStatus;
                });
        }

        $scope.loadExercise = function (module, exercise) {
            $scope.CurrentModule = module;
            $scope.CurrentExercise = exercise;

            if (exercise.Type === 'lecture' || exercise.Type === 'lab') {
                $scope.selectedPage = exercise.GuideUrl;
                $timeout(function () {
                    $scope.loadMDFile();
                }, 2000);

                if (exercise.Type === 'lab' && !$scope.hasLab) {
                    getTestDriveMode();
                    $scope.splitScreen = true;
                    $scope.hasLab = true;
                }

                $scope.LearningPathMode = 'Exercise';
            }
            else if (exercise.Type === 'quiz') {
                loadQuiz();
                $scope.ResponseReceived = false;
                $scope.LearningPathMode = 'Exercise';
            }
        };

        $scope.previousExercise = function () {
            var exercise = $scope.CurrentModule.Exercises[$scope.CurrentExercise.ExerciseNumber - 2];
            $scope.loadExercise($scope.CurrentModule, exercise);
        };

        $scope.nextExercise = function () {
            var exercise = $scope.CurrentModule.Exercises[$scope.CurrentExercise.ExerciseNumber];
            $scope.loadExercise($scope.CurrentModule, exercise);
        };

        $scope.goToOverview = function () {
            $scope.LearningPathMode = 'Overview';
            $scope.hasLab = false;
        };

        $scope.toggleScreen = function () {
            $scope.splitScreen = !$scope.splitScreen;
            if ($scope.splitScreen) {
                $timeout(function () {
                    $scope.loadMDFile();
                }, 2000);
            }
        };

        getOnDemandLab();

        $scope.loadMDFile = function () {
            if ($scope.selectedPage !== undefined && $scope.selectedPage !== null) {
                Flatdoc.run({
                    fetcher: Flatdoc.file($scope.selectedPage)
                });

                $(document).on('flatdoc:ready', function (e) {
                    e.stopImmediatePropagation();
                    var code = $("div.htmlCode").html();
                    if (code !== "") {
                        $("div.htmlCode").empty();
                        //code = code.replace('<inject key="AzureAdUserEmail"></inject>', $scope.username);
                        //code = code.replace('<inject key="AzureAdUserPassword"></inject>', $scope.password);
                        //code = code.replace(/\.\.\//g, $scope.githubMaster.ImagePath);
                        $("div.htmlCode").append(code);
                        $("div.htmlCode img").css({ 'max-width': '100%' });
                        $("div.htmlCode a").attr("target", "_blank");
                        $("div.htmlCode p:contains('title:')").hide();
                        $("#-redirect_from-labsvstscontinuousdeploymentindexhtm").hide();
                        // Replace Image URLs
                        var prefixURL = $scope.selectedPage.substring(0, $scope.selectedPage.lastIndexOf("/"));
                        $("div.htmlCode img").each(function () {
                            var url = $(this).attr('src');
                            if (url.includes('../')) {
                                prefixURL = prefixURL.substring(0, prefixURL.lastIndexOf("/") + 1);
                                $(this).attr("src", url.replace('../', prefixURL));
                            }
                            else if (url.includes('./') || !url.includes('https://')) {
                                prefixURL = $scope.selectedPage.substring(0, $scope.selectedPage.lastIndexOf("/") + 1);
                                if (url.includes('./')) {
                                    $(this).attr("src", url.replace('./', prefixURL));
                                }
                                else {
                                    $(this).attr("src", prefixURL + url);
                                }
                            }
                        });
                    }
                });
            }
        };

        $scope.EmptyQuiz = false;
        function loadQuiz() {
            if ($scope.CurrentExercise.QuizId !== null) {
                $http.get(appConstant.apiRoot + '/api/Poll/GetQuizForUser?pollId=' + $scope.CurrentExercise.QuizId)
                    .then(function (response) {
                        $scope.Quiz = response.data;
                        if ($scope.Quiz === null) {
                            $scope.EmptyQuiz = true;
                        }
                        else {
                            $scope.QuizName = response.data.Name;
                        }
                    });
            }
        };

        $scope.QuizResponse = {};
        $scope.QuizResponse.Responses = [];
        var temp = [];

        $scope.submitQuizResponse = function () {
            $scope.QuizResponse = { PollId: $scope.Quiz.Id, InviteLink: $scope.VoucherCode, PollType: 'quiz' };
            for (var i = 0; i < $scope.Quiz.Questions.length; i++) {
                if ($scope.Quiz.Questions[i].Type === 'radio') {
                    if ($scope.Quiz.Questions[i].Response !== undefined) {
                        for (var j = 0; j < $scope.Quiz.Questions[i].Options.length; j++) {
                            if ($scope.Quiz.Questions[i].Options[j].Id === parseInt($scope.Quiz.Questions[i].Response)) {
                                temp.push({ 'QuestionId': $scope.Quiz.Questions[i].Id, 'AnswerId': $scope.Quiz.Questions[i].Options[j].Id });
                            }
                        }
                    }
                    else {
                        temp.push({ 'QuestionId': $scope.Quiz.Questions[i].Id, 'AnswerId': 0 });
                    }
                }
                else if ($scope.Quiz.Questions[i].Type === 'checkbox') {
                    for (var j = 0; j < $scope.Quiz.Questions[i].Options.length; j++) {
                        if ($scope.Quiz.Questions[i].Options[j].selected !== undefined && $scope.Quiz.Questions[i].Options[j].selected === true) {
                            temp.push({ 'QuestionId': $scope.Quiz.Questions[i].Id, 'AnswerId': $scope.Quiz.Questions[i].Options[j].Id });
                        }
                    }
                }
            }

            $scope.QuizResponse.Responses = temp;
            $scope.QuizResponse.EventInternalId = encodeURIComponent($scope.CurrentTestDrive.InternalId);
            //Save Response
            $http.post(appConstant.apiRoot + '/api/Response?pollId=' + $scope.QuizResponse.PollId, $scope.QuizResponse)
                .then(function (response) {
                    $scope.Quiz = response.data;
                    $scope.ResponseReceived = true;
                    $scope.QuizResponse = {};
                    $scope.QuizResponse.Responses = [];
                    temp = [];
                });
        };

        $scope.submitCheckboxResponse = function (question) {
            for (var i = 0; i < question.Options.length; i++) {
                if (question.Options[i].selected !== undefined && question.Options[i].selected === true) {
                    temp.push({ 'QuestionId': question.Id, 'AnswerId': question.Options[i].Id });
                }
            }
        };

        $scope.redoQuiz = function () {
            loadQuiz();
            $scope.ResponseReceived = false;
        };

        function getOnDemandLab() {
            $http.get(appConstant.apiRoot + serviceEndpoint.attendeeTestDrive + '/OnDemandLab/' + $scope.SelectedTestDriveUniqueName + '/' + $rootScope.selectedLanguagekey)
                .then(function (response) {
                    response.data.Description = $sce.trustAsHtml(response.data.Description);

                    $scope.isTestDriveuser = false;
                    $scope.testdrive = response.data;
                    $scope.CurrentTestDrive = response.data;
                    $scope.CurrentTestDrive.CurrentVMName = null;

                    getSignUpFields(encodeURIComponent($scope.CurrentTestDrive.InternalId));

                    if ($scope.CurrentTestDrive.CustomTitle) {
                        $scope.constant.mainHeading = $scope.CurrentTestDrive.CustomTitle;
                    }

                    if ($scope.CurrentTestDrive.CustomPrivacyUrl) {
                        $scope.constant.privacyPolicyLink = $scope.CurrentTestDrive.CustomPrivacyUrl;
                    }
                    if ($scope.CurrentTestDrive.CustomPrivacyStatement) {
                        $scope.constant.copyrightMessage = $sce.trustAsHtml($scope.CurrentTestDrive.CustomPrivacyStatement);
                    }
                    if ($scope.CurrentTestDrive.LabPromotionMessage) {
                        $scope.CurrentTestDrive.LabPromotionMessage = $sce.trustAsHtml($scope.CurrentTestDrive.LabPromotionMessage);
                    }

                    if ($scope.CurrentTestDrive.ApprovalTypeId === 4 && $scope.CurrentTestDrive.VideoApprovalTypeId === 4) {
                        $scope.inviteOnly = true;
                    }
                    else if (($scope.CurrentTestDrive.LinkToVideo === null || $scope.CurrentTestDrive.LinkToVideo === '') && ($scope.CurrentTestDrive.LinkToInstructorVideo === null || $scope.CurrentTestDrive.LinkToInstructorVideo === '')) {
                        if ($scope.CurrentTestDrive.ApprovalTypeId === 4) {
                            $scope.inviteOnly = true;
                        }
                        $scope.hideVideo = true;
                        ////$scope.register = { 'ODL': true };
                    }

                    if (($scope.CurrentTestDrive.ApprovalTypeId === 1 || $scope.CurrentTestDrive.ApprovalTypeId === 13) && $scope.CurrentTestDrive.StatusId === 5 && $scope.userInviteLink === null) {
                        // anonymous user before launch
                        $scope.TestDriveMode = 'Anonymous';
                    }
                    else if (($scope.CurrentTestDrive.ApprovalTypeId === 1 || $scope.CurrentTestDrive.ApprovalTypeId === 13) && $scope.CurrentTestDrive.StatusId === 6) {
                        $scope.TestDriveMode = 'Information';
                    }
                    else if (($scope.CurrentTestDrive.ApprovalTypeId === 1 || $scope.CurrentTestDrive.ApprovalTypeId === 13) && $scope.userInviteLink !== null) {
                        // anonymous user after launch
                        $scope.TestDriveMode = 'Lab';
                        $scope.modeOfOperation = 'Initiation';
                    }

                    if ($scope.TestDriveMode === 'Lab' && $scope.userInviteLink !== undefined && $scope.userInviteLink !== null) {
                        getTestDriveMode();
                    }

                    $rootScope.showPageHeading = true;
                })
                .catch(function (response) {
                    $state.go('main.error');
                    $rootScope.showPageHeading = true;
                });
        }

        function getTestDriveMode() {
            $http.get(appConstant.apiRoot + serviceEndpoint.attendeeTestDrive + '/GetAttendeeTestDrive/' + $scope.VoucherCode)
                .then(function (response) {
                    
                    $scope.CurrentTestDriveUserData = response.data;

                    if (response.data.ADSetupStatus && response.data.IsDeploymentActive) {
                        // currently running
                        $scope.modeOfOperation = 'Initiation';
                        //pollTestDriveStatus();
                        deployOnDemandLabForUser();
                    }
                    else if (!response.data.IsDeploymentActive && (response.data.DeploymentStatus === "Deleted" || response.data.DeploymentStatus === "Deleting")) {
                        // already executed
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else if (!response.data.ADSetupStatus && response.data.IsActive) {
                        // not yet init
                        $scope.modeOfOperation = 'Un-initiated';
                    }
                    else if (response.data.ADSetupStatus && response.data.IsActive && response.data.CurrentStatus === "Failed") {
                        $scope.modeOfOperation = 'Failed';
                    }
                    else if (response.data.ADSetupStatus && response.data.IsActive && response.data.DeploymentStatus === null) {
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else {
                        // expired
                        $scope.modeOfOperation = 'Expired';
                    }
                })
                .catch(function (ex) {
                    $state.go('main.error');
                });
        }

        function deployOnDemandLabForUser() {
            $scope.modeOfOperation = 'Initiation';
            var url = appConstant.apiRoot + '/api/AttendeeTestDrive/InitiateDeployment/' + encodeURIComponent($scope.CurrentTestDrive.InternalId);
            if ($scope.VoucherCode !== null && $scope.VoucherCode !== undefined) {
                url = url + '/' + $scope.VoucherCode;
            }

            $http.get(url)
                .then(function (response) {
                    if (response.data.Result !== null && response.data.Result.ErrorMessage === "Lab already completed") {
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else {
                        $scope.modeOfOperation = 'Initiation';
                        $scope.CurrentTestDriveUserData.Status = response.data;
                        $scope.VMLaunchURLs = response.data.VMLaunchURL;

                        if ($scope.VMLaunchURLs !== undefined && $scope.VMLaunchURLs !== null && $scope.VMLaunchURLs.length > 0) {
                            $scope.rdpSRC = $sce.trustAsResourceUrl($scope.VMLaunchURLs[0].LaunchURL);
                        }

                        if (response.data.DeploymentStatus === "Succeeded") {
                            $scope.modeOfOperation = 'In-Progress';
                            var startTime = response.data.StartTime;
                            stopPolling();
                            if (!$scope.CurrentTestDrive.BlockExpiration) {
                                findRemainingDuration($scope.CurrentTestDriveUserData.Status.StartTime, $scope.CurrentTestDriveUserData.Status.Duration);
                            }

                            if ($scope.minutes < 0 && !$scope.CurrentTestDrive.EnableAzurePass) {
                                $scope.modeOfOperation = 'Deallocated';
                            }
                        }
                        else if (response.data.DeploymentStatus === "Policy failed after deployment succeeded") {
                            $scope.modeOfOperation = 'Policy_Failed_After_Deployment';
                        }
                        else if (response.data.DeploymentStatus === "Failed") {
                            $scope.modeOfOperation = 'Failed';
                        }
                        else if (response.data.DeploymentStatus === "Deleting") {
                            $scope.modeOfOperation = 'Deallocating';
                        }
                        else if (response.data.DeploymentStatus === "Deleted") {
                            $scope.modeOfOperation = 'Deallocated';
                        }
                        else {
                            startPolling();
                            $scope.modeOfOperation = 'Initiation';
                        }
                    }
                })
                .catch(function (ex) {
                    if (ex.data.ErrorDetail === "Lab already completed") {
                        $scope.modeOfOperation = 'Deployed';
                    }
                    else {
                        $scope.error = ex.data.ErrorDetail;
                        $scope.modeOfOperation = 'Failed';
                    }
                });
        }

        function findRemainingDuration(startTime, actualDuration) {
            var start = moment.utc(startTime, "YYYY-MM-DD HH:mm:ss");
            var current = moment.utc(new Date(), "HH:mm");
            var duration = moment.duration(current.diff(start));

            actualDuration = moment.duration(actualDuration, 'hours');
            var remainingDuration = actualDuration.subtract(duration);
            $scope.day = parseInt(remainingDuration.asDays());
            $scope.hours = remainingDuration.get('hours');
            if ($scope.day > 0) {
                var daysHours = $scope.day * 24;
                $scope.hours = daysHours + $scope.hours;
            }
            $scope.minutes = remainingDuration.get('minutes');
            countdown();
        };

        var countDownTimer;

        function countdown() {
            countDownTimer = $timeout(function () {
                $scope.minutes--;

                if ($scope.minutes < 0) {
                    $scope.minutes = 59;
                    $scope.hours--;

                    if ($scope.hours < 0) {
                        stopTimerFunc();
                    }
                }

                countdown();
            }, 60000);
        };

        var stopTimer = true;
        function stopTimerFunc() {
            if (stopTimer) {
                $timeout.cancel(countDownTimer);
                $scope.minutes = 0;
                $scope.hours = 0;
                $scope.modeOfOperation = 'Deallocated';
                stopTimer = false;
            }
        }

        var isPolling = false;
        var polling;
        function startPolling() {
            if (!isPolling) {
                isPolling = true;
                polling = $interval(deployOnDemandLabForUser, appConstant.pollIntervalInMinutes * 60000);
            }
        }

        function stopPolling() {
            if (isPolling) {
                $interval.cancel(polling);
                isPolling = false;
            }
        }

        $scope.startTestDrive = function () {
            var localTime = moment(localTime).format('YYYY-MM-DD');
            var stillUtc = moment($scope.CurrentTestDrive.ExpiryDate);
            var expiryDateToLocal = moment(stillUtc).format('YYYY-MM-DD');

            //Checking if the ODL is expired
            if (localTime <= expiryDateToLocal) {
                $scope.isExpired = false;
                $scope.modeOfOperation = 'Initiation';
                $http.get(appConstant.apiRoot + serviceEndpoint.attendeeTestDrive + '/CheckLabActivationClosed?internalId=' + encodeURIComponent($scope.CurrentTestDrive.InternalId) + '&voucherCode=' + $scope.userInviteLink)
                    .then(function (response) {
                        if (response.data) {
                            $scope.modeOfOperation = 'ActivationClosed';
                        }
                        else {
                            deployOnDemandLabForUser();
                        }
                    });
            }
            else {
                $scope.isExpired = true;
                notifier.notifyError($filter('translate')("ERROR_ODL_EXPIRED"));
            }
        };

        $scope.confirmCopy = function () {
            notifier.notify($filter('translate')("MESSAGE_COPIED"));
        };

        $scope.submitUser = function () {
            var isValid = true;
            $scope.isExpired = false;

            if ($scope.testdrive.EnableVoucher) {
                if ($scope.CurrentUser.VoucherCode) {
                    isValid = true;
                }
                else {
                    notifier.notifyError($filter('translate')("MESSAGE_PROVIDE_VOUCHER"));
                    isValid = false;
                }
            }

            //console.log($scope.CurrentUser);
            var localTime = moment(localTime).format('YYYY-MM-DD');
            var stillUtc = moment($scope.CurrentTestDrive.EndDate);
            var expiryDateToLocal = moment(stillUtc).format('YYYY-MM-DD');

            //Checking if the ODL is expired
            if (localTime <= expiryDateToLocal) {
                $scope.isExpired = false;
            }
            else {
                $scope.isExpired = true;
                notifier.notifyError($filter('translate')("ERROR_ODL_EXPIRED"));
            }

            this.frmManageUser.$submitted = true;
            if (this.frmManageUser.$valid && $scope.validOfficeEmail && isValid && !$scope.isExpired) {
                $http.post(appConstant.apiRoot + serviceEndpoint.onDemandLabUser + '/Register?internalId=' + encodeURIComponent($scope.CurrentTestDrive.InternalId), $scope.CurrentUser).then(function (response) {
                    if (response.data.Result.Status === "Success") {
                        $scope.userLink = response.data.VoucherCode;
                        notifier.notify($filter('translate')("REGISTRATION_COMPLETED"));
                        $scope.registered = true;
                        $scope.userLink = appConstant.studentPortalUrl + "#/learn/" + $scope.CurrentTestDrive.UniqueName + "/" + $scope.userLink;
                        if ($scope.CurrentTestDrive.ApprovalTypeId === 2 || $scope.CurrentTestDrive.ApprovalTypeId === 10 || $scope.CurrentTestDrive.ApprovalTypeId === 11) {
                            $window.open($scope.userLink, '_self');
                        }
                    }
                    else if (response.data.Result.ErrorMessage === 'User already registered! An email has sent to launch the lab!' || response.data.Result.ErrorMessage === 'User already has an active deployment! An email has been sent to launch the lab!') {
                        var error = null;
                        if (response.data.Result.ErrorMessage === 'User already registered! An email has sent to launch the lab!') {
                            error = $filter('translate')("MESSAGE_ACTIVE_DEPLOYMENT");
                        }
                        else {
                            error = $filter('translate')("MESSAGE_ALREADY_REGISTERED");
                        }

                        notifier.notifyInfo(error);
                    }
                    else {
                        notifier.notifyError(response.data.Result.ErrorMessage);
                    }
                })
                    .catch(function (ex) {
                        notifier.notifyError(ex.data.ErrorDetail);
                    })
            }
        };

        function getSignUpFields(internalId) {
            $http.get(appConstant.apiRoot + '/api/Customization/GetSignUpFieldsByEventId?eventId=' + 0 + '&InternalId=' + internalId).
                then(function (response) {
                    $scope.CustomizedFields = response.data;
                    $scope.EmailFlag = true;
                    if (response.data.length === 0) {
                        $scope.CustomizedFields = response.data;
                        $scope.FnameFlag = true;
                        $scope.LnameFlag = true;
                        $scope.OrgFlag = true;
                        $scope.CountryFlag = true;
                    }
                    else {
                        for (var i = 0; i < response.data.length; i++) {
                            if ($scope.CustomizedFields[i].FieldId === 100 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.FnameFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId === 101 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.LnameFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId === 103 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.OrgFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId === 104 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.CountryFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId === 105 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.JobFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId === 106 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.PhoneFlag = true;
                            }
                            if ($scope.CustomizedFields[i].FieldId === 107 && $scope.CustomizedFields[i].IsVisible) {
                                $scope.StateFlag = true;
                            }
                        }
                    }
                });
        }

        $scope.CurrentUser = {};
        $scope.checkIsValidInput = function () {
            var format = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;
            var workPhoneFormat = /[!@#$%^&*()_\=\[\]{};':"\\|,.<>\/?]/;
            var firstName = $scope.CurrentUser.FirstName;
            var lastName = $scope.CurrentUser.LastName;
            var organization = $scope.CurrentUser.Organization;
            var workPhone = $scope.CurrentUser.WorkPhone;
            if (format.test(firstName))
                $scope.validFirstName = false;
            else
                $scope.validFirstName = true;
            if (format.test(lastName))
                $scope.validLastName = false;
            else
                $scope.validLastName = true;
            if (format.test(organization))
                $scope.validOrganization = false;
            else
                $scope.validOrganization = true;
            if (workPhoneFormat.test(workPhone))
                $scope.validWorkPhone = false;
            else
                $scope.validWorkPhone = true;
        };

        $scope.checkIsWorkEmail = function () {
            var email = $scope.CurrentUser.Email.split('@'); //split email into two at '@'
            if (email.length > 1) //check for 2 valid parts
                $scope.validOfficeEmail = true;
            else
                $scope.validOfficeEmail = false;
            var emailFormat = email[1].split('.'); //split domain part into two at '.'
            if (emailFormat.length > 1) //check for 2 valid parts
                $scope.validOfficeEmail = true;
            else
                $scope.validOfficeEmail = false;

            //check for valid email parts, between '@' and '.' of domain
            if (emailFormat[0].length === 0 || email[0].length === 0 || emailFormat[1].length === 0 || email[1].length === 0)
                $scope.validOfficeEmail = false;

            if (!$scope.CurrentTestDrive.AllowPersonalEmailAddressesForRegistration) {
                if ($scope.validOfficeEmail) //if all validations passed
                {
                    for (var i = 0; i < invalidEmails.length; i++) {
                        if (emailFormat[0].toLowerCase() === invalidEmails[i]) //check if from public domain
                        {
                            $scope.validOfficeEmail = false;
                            break;
                        }
                        else {
                            $scope.validOfficeEmail = true;
                        }
                    }
                }
            }
            else {
                $scope.validOfficeEmail = true;
            }
        };
    }
})();